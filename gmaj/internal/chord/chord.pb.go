// Code generated by protoc-gen-go.
// source: github.com/r-medina/gmaj/internal/chord/chord.proto
// DO NOT EDIT!

/*
Package chord is a generated protocol buffer package.

It is generated from these files:
	github.com/r-medina/gmaj/internal/chord/chord.proto

It has these top-level messages:
*/
package chord

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import gmajpb "github.com/r-medina/gmaj/gmajpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Chord service

type ChordClient interface {
	// GetPredecessor returns the node believed to be the current predecessor.
	GetPredecessor(ctx context.Context, in *gmajpb.MT, opts ...grpc.CallOption) (*gmajpb.Node, error)
	// GetSuccessor returns the node believed to be the current successor.
	GetSuccessor(ctx context.Context, in *gmajpb.MT, opts ...grpc.CallOption) (*gmajpb.Node, error)
	// SetPredecessor sets Node as the predeccessor. This function does not do
	// any validation.
	SetPredecessor(ctx context.Context, in *gmajpb.Node, opts ...grpc.CallOption) (*gmajpb.MT, error)
	// SetPredecessor sets Node as the successor. This function does not do any
	// validation.
	SetSuccessor(ctx context.Context, in *gmajpb.Node, opts ...grpc.CallOption) (*gmajpb.MT, error)
	// Notify notifies Chord that Node thinks it is our predecessor. This has
	// the potential to initiate the transferring of keys.
	Notify(ctx context.Context, in *gmajpb.Node, opts ...grpc.CallOption) (*gmajpb.MT, error)
	// ClosestPrecedingFinger returns the entry of the finger table that
	// precedes ID but is closest to it.
	ClosestPrecedingFinger(ctx context.Context, in *gmajpb.ID, opts ...grpc.CallOption) (*gmajpb.Node, error)
	// FindSuccessor finds the node the succedes ID. May initiate RPC calls to
	// other nodes.
	FindSuccessor(ctx context.Context, in *gmajpb.ID, opts ...grpc.CallOption) (*gmajpb.Node, error)
	// GetKey returns the value in node for the given key;
	GetKey(ctx context.Context, in *gmajpb.Key, opts ...grpc.CallOption) (*gmajpb.Val, error)
	// PutKeyVal writes a key value pair to the node.
	PutKeyVal(ctx context.Context, in *gmajpb.KeyVal, opts ...grpc.CallOption) (*gmajpb.MT, error)
	// TransferKeys tells a node to transfer keys in a specified range to
	// another node.
	TransferKeys(ctx context.Context, in *gmajpb.TransferKeysReq, opts ...grpc.CallOption) (*gmajpb.MT, error)
}

type chordClient struct {
	cc *grpc.ClientConn
}

func NewChordClient(cc *grpc.ClientConn) ChordClient {
	return &chordClient{cc}
}

func (c *chordClient) GetPredecessor(ctx context.Context, in *gmajpb.MT, opts ...grpc.CallOption) (*gmajpb.Node, error) {
	out := new(gmajpb.Node)
	err := grpc.Invoke(ctx, "/chord.Chord/GetPredecessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetSuccessor(ctx context.Context, in *gmajpb.MT, opts ...grpc.CallOption) (*gmajpb.Node, error) {
	out := new(gmajpb.Node)
	err := grpc.Invoke(ctx, "/chord.Chord/GetSuccessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) SetPredecessor(ctx context.Context, in *gmajpb.Node, opts ...grpc.CallOption) (*gmajpb.MT, error) {
	out := new(gmajpb.MT)
	err := grpc.Invoke(ctx, "/chord.Chord/SetPredecessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) SetSuccessor(ctx context.Context, in *gmajpb.Node, opts ...grpc.CallOption) (*gmajpb.MT, error) {
	out := new(gmajpb.MT)
	err := grpc.Invoke(ctx, "/chord.Chord/SetSuccessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) Notify(ctx context.Context, in *gmajpb.Node, opts ...grpc.CallOption) (*gmajpb.MT, error) {
	out := new(gmajpb.MT)
	err := grpc.Invoke(ctx, "/chord.Chord/Notify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) ClosestPrecedingFinger(ctx context.Context, in *gmajpb.ID, opts ...grpc.CallOption) (*gmajpb.Node, error) {
	out := new(gmajpb.Node)
	err := grpc.Invoke(ctx, "/chord.Chord/ClosestPrecedingFinger", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) FindSuccessor(ctx context.Context, in *gmajpb.ID, opts ...grpc.CallOption) (*gmajpb.Node, error) {
	out := new(gmajpb.Node)
	err := grpc.Invoke(ctx, "/chord.Chord/FindSuccessor", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) GetKey(ctx context.Context, in *gmajpb.Key, opts ...grpc.CallOption) (*gmajpb.Val, error) {
	out := new(gmajpb.Val)
	err := grpc.Invoke(ctx, "/chord.Chord/GetKey", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) PutKeyVal(ctx context.Context, in *gmajpb.KeyVal, opts ...grpc.CallOption) (*gmajpb.MT, error) {
	out := new(gmajpb.MT)
	err := grpc.Invoke(ctx, "/chord.Chord/PutKeyVal", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chordClient) TransferKeys(ctx context.Context, in *gmajpb.TransferKeysReq, opts ...grpc.CallOption) (*gmajpb.MT, error) {
	out := new(gmajpb.MT)
	err := grpc.Invoke(ctx, "/chord.Chord/TransferKeys", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Chord service

type ChordServer interface {
	// GetPredecessor returns the node believed to be the current predecessor.
	GetPredecessor(context.Context, *gmajpb.MT) (*gmajpb.Node, error)
	// GetSuccessor returns the node believed to be the current successor.
	GetSuccessor(context.Context, *gmajpb.MT) (*gmajpb.Node, error)
	// SetPredecessor sets Node as the predeccessor. This function does not do
	// any validation.
	SetPredecessor(context.Context, *gmajpb.Node) (*gmajpb.MT, error)
	// SetPredecessor sets Node as the successor. This function does not do any
	// validation.
	SetSuccessor(context.Context, *gmajpb.Node) (*gmajpb.MT, error)
	// Notify notifies Chord that Node thinks it is our predecessor. This has
	// the potential to initiate the transferring of keys.
	Notify(context.Context, *gmajpb.Node) (*gmajpb.MT, error)
	// ClosestPrecedingFinger returns the entry of the finger table that
	// precedes ID but is closest to it.
	ClosestPrecedingFinger(context.Context, *gmajpb.ID) (*gmajpb.Node, error)
	// FindSuccessor finds the node the succedes ID. May initiate RPC calls to
	// other nodes.
	FindSuccessor(context.Context, *gmajpb.ID) (*gmajpb.Node, error)
	// GetKey returns the value in node for the given key;
	GetKey(context.Context, *gmajpb.Key) (*gmajpb.Val, error)
	// PutKeyVal writes a key value pair to the node.
	PutKeyVal(context.Context, *gmajpb.KeyVal) (*gmajpb.MT, error)
	// TransferKeys tells a node to transfer keys in a specified range to
	// another node.
	TransferKeys(context.Context, *gmajpb.TransferKeysReq) (*gmajpb.MT, error)
}

func RegisterChordServer(s *grpc.Server, srv ChordServer) {
	s.RegisterService(&_Chord_serviceDesc, srv)
}

func _Chord_GetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.MT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/GetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetPredecessor(ctx, req.(*gmajpb.MT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.MT)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/GetSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetSuccessor(ctx, req.(*gmajpb.MT))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_SetPredecessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).SetPredecessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/SetPredecessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).SetPredecessor(ctx, req.(*gmajpb.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_SetSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).SetSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/SetSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).SetSuccessor(ctx, req.(*gmajpb.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_Notify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).Notify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/Notify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).Notify(ctx, req.(*gmajpb.Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_ClosestPrecedingFinger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).ClosestPrecedingFinger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/ClosestPrecedingFinger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).ClosestPrecedingFinger(ctx, req.(*gmajpb.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_FindSuccessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).FindSuccessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/FindSuccessor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).FindSuccessor(ctx, req.(*gmajpb.ID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).GetKey(ctx, req.(*gmajpb.Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_PutKeyVal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.KeyVal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).PutKeyVal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/PutKeyVal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).PutKeyVal(ctx, req.(*gmajpb.KeyVal))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chord_TransferKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(gmajpb.TransferKeysReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChordServer).TransferKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chord.Chord/TransferKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChordServer).TransferKeys(ctx, req.(*gmajpb.TransferKeysReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chord.Chord",
	HandlerType: (*ChordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPredecessor",
			Handler:    _Chord_GetPredecessor_Handler,
		},
		{
			MethodName: "GetSuccessor",
			Handler:    _Chord_GetSuccessor_Handler,
		},
		{
			MethodName: "SetPredecessor",
			Handler:    _Chord_SetPredecessor_Handler,
		},
		{
			MethodName: "SetSuccessor",
			Handler:    _Chord_SetSuccessor_Handler,
		},
		{
			MethodName: "Notify",
			Handler:    _Chord_Notify_Handler,
		},
		{
			MethodName: "ClosestPrecedingFinger",
			Handler:    _Chord_ClosestPrecedingFinger_Handler,
		},
		{
			MethodName: "FindSuccessor",
			Handler:    _Chord_FindSuccessor_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _Chord_GetKey_Handler,
		},
		{
			MethodName: "PutKeyVal",
			Handler:    _Chord_PutKeyVal_Handler,
		},
		{
			MethodName: "TransferKeys",
			Handler:    _Chord_TransferKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/r-medina/gmaj/internal/chord/chord.proto",
}

func init() {
	proto.RegisterFile("github.com/r-medina/gmaj/internal/chord/chord.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4f, 0x83, 0x30,
	0x14, 0xc7, 0x0f, 0x66, 0x4b, 0x7c, 0x22, 0x87, 0x1e, 0x34, 0xe1, 0xb8, 0x8b, 0x4a, 0x22, 0x24,
	0xe3, 0x23, 0xcc, 0x8c, 0x18, 0xe2, 0xb2, 0xc8, 0xb2, 0x7b, 0xa1, 0x6f, 0xac, 0x06, 0xda, 0xd9,
	0x96, 0x03, 0xdf, 0xcc, 0x8f, 0x67, 0x0a, 0xc1, 0x14, 0x75, 0x7a, 0x79, 0xed, 0x7b, 0xef, 0xf7,
	0x7f, 0xfd, 0xb7, 0x85, 0xa4, 0xe2, 0xe6, 0xd8, 0x16, 0x51, 0x29, 0x9b, 0x58, 0x3d, 0x36, 0xc8,
	0xb8, 0xa0, 0x71, 0xd5, 0xd0, 0xb7, 0x98, 0x0b, 0x83, 0x4a, 0xd0, 0x3a, 0x2e, 0x8f, 0x52, 0xb1,
	0x21, 0x46, 0x27, 0x25, 0x8d, 0x24, 0xb3, 0x3e, 0x09, 0xc2, 0xb3, 0x5a, 0x1b, 0x4e, 0x45, 0xbf,
	0x0c, 0x92, 0xe5, 0xc7, 0x05, 0xcc, 0x56, 0x56, 0x45, 0x42, 0xf0, 0x53, 0x34, 0x5b, 0x85, 0x0c,
	0x4b, 0xd4, 0x5a, 0x2a, 0x02, 0xd1, 0xc0, 0x47, 0x2f, 0xbb, 0xc0, 0x1b, 0xf7, 0x1b, 0xc9, 0x90,
	0xdc, 0x83, 0x97, 0xa2, 0xc9, 0xdb, 0xf2, 0x5f, 0x32, 0x04, 0x3f, 0x9f, 0x4e, 0x9d, 0xf4, 0x03,
	0x47, 0x69, 0xa7, 0xe6, 0xee, 0xd4, 0xf3, 0xe4, 0x02, 0xe6, 0x1b, 0x69, 0xf8, 0xa1, 0xfb, 0x83,
	0x59, 0xc2, 0xcd, 0xaa, 0x96, 0x1a, 0xb5, 0x3d, 0xbd, 0xb4, 0x8f, 0x50, 0xad, 0xb9, 0xa8, 0xd0,
	0x71, 0xfb, 0xfc, 0xf4, 0xcd, 0xed, 0x03, 0x5c, 0xaf, 0xb9, 0x60, 0xbf, 0x5c, 0xec, 0x07, 0xba,
	0x80, 0x79, 0x8a, 0x26, 0xc3, 0x8e, 0x5c, 0x8d, 0xf5, 0x0c, 0xbb, 0xe0, 0x2b, 0xd9, 0xd3, 0x9a,
	0xdc, 0xc1, 0xe5, 0xb6, 0xb5, 0x8c, 0x4d, 0x7c, 0x07, 0xdb, 0xd3, 0x7a, 0xe2, 0x35, 0x01, 0x6f,
	0xa7, 0xa8, 0xd0, 0x07, 0x54, 0x19, 0x76, 0x9a, 0xdc, 0x8e, 0x3d, 0xb7, 0xfa, 0x8a, 0xef, 0xae,
	0xa8, 0x98, 0xf7, 0x3f, 0x98, 0x7c, 0x06, 0x00, 0x00, 0xff, 0xff, 0x5c, 0x44, 0x92, 0xd4, 0x2b,
	0x02, 0x00, 0x00,
}
